{
    "collab_server" : "",
    "contents" : "library(tidyverse)\nlibrary(grid)\nlibrary(vcd)\nlibrary(GGally)\nlibrary(Amelia)\n#FUNCION LOAD\nf <- \"algas.rds\"\nload <- function(f){\n  \n  if (!file.exists(f)){\n    \n    algas_url <- paste0('https://archive.ics.uci.edu/ml/machine-learning-databases/coil-mld/analysis.data')\n    \n    algas <- read_csv(algas_url, \n                            col_names = algas_colnames,\n                            na = 'XXXXXXX')\n    \n    saveRDS(algas,f)\n    \n    }else{\n      \n      print(\"El archivo algas.rds ya existe\")\n      \n    }\n}\n\nload(f)\n\n#FUNCION DECODE\ngerman_decode <- function(columna){\n  \n  if(exists(\"german_codes\")){\n    source(\"metadata.R\") # german_codes = ON\n  }\n  \n  if( class(columna) %in% c('character', 'factor') ){\n    \n    # df(data.column)\n    column_ok <- data.frame(col.id = as.character(columna),\n                            stringsAsFactors = F)\n        # query\n    code_cat <- left_join(\n      # left table\n      column_ok,\n      # crea cat, right table (al vuelo)\n      german_codes %>%\n        bind_rows() %>%\n        gather(col.id, col.desc), # col_name[2] = col.desc\n      by = \"col.id\" )\n    # tratamiento NA's\n    code_cat <- mutate(code_cat,\n                       col.modif = ifelse(\n                         is.na(col.desc),\n                         col.id,\n                         col.desc))\n    column_ok <- code_cat$col.modif\n  }\n  else {\n    column_ok <- columna\n  }\n  return(column_ok)\n  rm(column_ok,code_cat)\n}\n    \n#FUNCION CLEAN\n\nclean_text <- function(limpieza){\n  colnames(data) <- str_to_lower(colnames(data))\n  colnames(data) <- str_replace_all(colnames(data),\" \",\"_\")\n  colnames(data) <- str_replace_all(colnames(data),\"/\",\"_\")\n  colnames(data)\n}\n\n#FUNCION QUE GENERE LOS TIPOS DE GRAFICA PARA CADA PAR DE VARIABLES\n\nauto_plot <- function(data,f){\n  \n  data <- data.frame(data)\n  theme_set(theme_bw())\n  numericvars <- character(length = ncol(data))\n  charvars <- character(length = ncol(data))\n  names <- colnames(data)\n  #Loop para sdividir la clase de la columna\n  for(i in seq_len(ncol(data))) {\n    if(class(data[, i]) == \"numeric\") {\n      numericvars[i] <- names[i]\n    }\n    else {\n      if(class(data[, i]) == \"character\") {\n        charvars[i] <- names[i]\n      }\n    }\n  }\n  #no se me ocurrio de otra\n  subset_numeric <- data %>% \n    select(one_of(numericvars))\n  \n  subset_chr <- data %>% \n    select(one_of(charvars))\n  \n  if(length(subset_numeric)!=0){\n    print(\"Variables numericas\")\n    print(subset_numeric %>% ggpairs())\n  }\n  \n  if(length(subset_chr)!=0){\n    print(\"Variables Character\")\n    print(subset_chr %>% ggpairs())\n  }\n  \n  pares <- combinations(length(colnames(data)),r=2,colnames(data))\n  \n  for(i in 1:(length(pares[,1]))){\n    if(as.character(pares[i,1])==as.character(pares[i,2])){\n      next #statement para no graficar mismas vars\n    }\n    else{\n      #grafica nice\n      print(data %>% ggpairs(c(as.character(pares[i,1]),as.character(pares[i,2]))))\n    }\n  }\n  \n}\n\n#TAREA 6 FUNCION DE NAS\n\nindices_con_NAs <- function (data, porcentaje = 0.2){\n  n <- if (porcentaje < 1) {\n    as.integer(porcentaje * ncol(data))\n  }\n  else {\n    stop(\"Debes de introducir el porcentaje de columnas con NAs.\")\n  }\n  indices <- which(apply(data, 1, function(x) sum(is.na(x))) >\n                     n)\n  if (!length(indices)) {\n    warning(\"No hay observaciones con tantos NAs\\\\n            (la respuesta de la funcion es vacia),\\\\n            no se recomienda indexar el data.frame con esto\")\n  }\n  indices\n}\n\n#Funcion para MODA\ngetmode <- function(v) {\n  uniqv <- unique(v)\n  uniqv[which.max(tabulate(match(v, uniqv)))]\n}\n\n#FUncion imputar el valor central:\n\nimputar_valor_central <- function(data, colnames){\n\n  data <- data.frame(data)\n  numericvars <- character(length = ncol(data))\n  charvars <- character(length = ncol(data))\n  colnames <- colnames(data)\n  \n  for(i in seq_len(ncol(data))){\n    if(class(data[, i]) == \"numeric\") {\n      numericvars[i] <- colnames[i]\n    }\n    else {\n      if(class(data[, i]) == \"character\") {\n        charvars[i] <- colnames[i]\n      }\n    }\n  }\n  \n  subset_numeric <- data %>% \n    select(one_of(numericvars))\n  subset_chr <- data %>% \n    select(one_of(charvars))\n  \n  for(i in colnames[i]) {\n    if(length(subset_numeric)!=0){\n      subset_numeric %>%\n        mutate(colnames[i]=ifelse(is.na(colnames[i]),median(colnames[i], na.rm = T),colnames[i]))\n    }\n    else {\n      if(length(subset_chr)!=0){\n        subset_chr %>% \n          mutate(colnames[i]=ifelse(is.na(colnames[i]),getmode(colnames[i]),colnames[i]))\n      }\n    }\n  }\n  return(data)\n}\n",
    "created" : 1509771044165.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4023582894",
    "id" : "CCB6245D",
    "lastKnownWriteTime" : 1510296481,
    "last_content_update" : 1510296481102,
    "path" : "C:/Users/FORANEA110/Desktop/MINERIA/Tareas/algas/tarea_nas/utils.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}